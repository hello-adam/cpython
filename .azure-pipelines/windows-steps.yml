steps:
- checkout: self
  clean: false
  fetchDepth: 5

- script: |
    cp -rv .\Include $(Build.ArtifactStagingDirectory)\include
    cp -v .\PC\\*.h $(Build.ArtifactStagingDirectory)\include\
    rm -rfv $(Build.ArtifactStagingDirectory)\include\internal
  displayName: 'Stage public include files for publishing'

- powershell: |
    $d = (.\PCbuild\build.bat -V) | %{ if($_ -match '\s+(\w+):\s*(.+)\s*$') { @{$Matches[1] = $Matches[2];} }};
    Write-Host "##vso[task.setvariable variable=VersionText]$($d.PythonVersion)"
    Write-Host "##vso[task.setvariable variable=VersionNumber]$($d.PythonVersionNumber)"
    Write-Host "##vso[task.setvariable variable=VersionHex]$($d.PythonVersionHex)"
    Write-Host "##vso[task.setvariable variable=VersionUnique]$($d.PythonVersionUnique)"
  displayName: 'Extract version numbers'

- powershell: |
    # Relocate build outputs outside of source directory to make cleaning faster
    Write-Host '##vso[task.setvariable variable=Py_IntDir]$(Build.BinariesDirectory)\obj'
    # UNDONE: Do not build to a different directory because of broken tests
    Write-Host '##vso[task.setvariable variable=Py_OutDir]$(Build.BinariesDirectory)\bin'
    Write-Host '##vso[task.setvariable variable=EXTERNALS_DIR]$(Build.BinariesDirectory)\externals'
  displayName: Update build locations

- script: PCbuild\build.bat -v -e -p x64 --pgo
  displayName: 'Build CPython'
  env:
    IncludeUwp: false

- powershell: |
    Write-Host '##vso[task.setvariable variable=Python]$(Build.BinariesDirectory)\bin\amd64\python.exe'
    Write-Host '##vso[task.setvariable variable=PYTHONHOME]$(Build.SourcesDirectory)'
  displayName: Set python path variables

- script: python.bat -m test.pythoninfo
  displayName: 'Display build info'

- powershell: >
    Write-Host (
    '##vso[task.setvariable variable=LayoutCmd]&
    "{0}\bin\amd64\python.exe"
    "{1}\PC\layout"
    -vv
    --source "{1}"
    --build "{0}\bin\amd64"
    --arch "amd64"
    --temp "{0}\layout-temp"'
    -f ("$(Build.BinariesDirectory)", "$(Build.SourcesDirectory)")
    )
  displayName: 'Prepare layout command'

- powershell: >
    $(LayoutCmd)
    --copy "$(Build.ArtifactStagingDirectory)\bin"
    --preset-embed
  displayName: 'Generate embeddable layout'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    pathToPublish: $(Build.ArtifactStagingDirectory)
    artifactName: python_windows_2019